// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Jogo {
  id            Int        @id @default(autoincrement())
  nome          String     @db.VarChar(200)
  descricao     String     @db.VarChar(500)
  preco         Float       @db.Float()
  data_lanc     DateTime   @db.Date()
  img_url       String?    @db.VarChar(500)
  
  // Relacionamento com o modelo Plataforma
  plataforma    Plataforma @relation(fields: [plataformaId], references: [id])
  plataformaId  Int        @db.Int

  // Relacionamento com o modelo Desenvolvedor
  desenvolvedor    Desenvolvedor @relation(fields: [desenvolvedorId], references: [id])
  desenvolvedorId  Int        @db.Int

  // Relacionamento com o modelo Genero
  genero    Genero @relation(fields: [generoId], references: [id])
  generoId  Int        @db.Int

  @@map("jogos")
  ItemPedido ItemPedido[]
}

model Plataforma {
  id    Int    @id @default(autoincrement())
  nome  String @db.VarChar(200)

  // Relacionamento inverso
  jogos Jogo[]

  @@map("plataformas")
}

model Desenvolvedor {
  id    Int    @id @default(autoincrement())
  nome  String @db.VarChar(200)

  // Relacionamento inverso
  jogos Jogo[]

  @@map("desenvolvedores")
}

model Genero {
  id    Int    @id @default(autoincrement())
  nome  String @db.VarChar(200)

  // Relacionamento inverso
  jogos Jogo[]

  @@map("generos")
}


model Usuario {
  id          Int      @id @default(autoincrement())
  nome        String   @db.VarChar(500)
  email       String   @unique @db.VarChar(500)
  senha       String   @db.VarChar(255)
  dataCriacao DateTime @default(now())

  pedidos     Pedido[]

  @@map("usuarios")
}

model Pedido {
  id          Int       @id @default(autoincrement())
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  dataPedido  DateTime  @default(now())
  status      String    @db.VarChar(50)
  total       Float     @db.Float()

  pagamentos  Pagamento[]
  itens       ItemPedido[]

  @@map("pedidos")
}

model Pagamento {
  id             Int      @id @default(autoincrement())
  pedido         Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId       Int
  metodoPagamento String   @db.VarChar(100)
  valor          Float    @db.Float()
  dataPagamento  DateTime @default(now())
  status         String   @db.VarChar(50)

  @@map("pagamentos")
}

model ItemPedido {
  id         Int     @id @default(autoincrement())
  pedido     Pedido  @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
  jogo       Jogo    @relation(fields: [jogoId], references: [id])
  jogoId     Int
  quantidade Int
  preco      Float   @db.Float()

  @@map("itens_pedido")
}

